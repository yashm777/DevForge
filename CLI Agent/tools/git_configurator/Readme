# Git Configurator - CLI Agent Tool

This module handles Git operations within the CLI Agent. It is designed to be platform-specific, and the `tools/git_configurator` directory includes implementations for:

* `linux.py` — Fedora and Ubuntu
* `mac.py` — macOS
* (Future) `windows.py` — Windows support (planned)

## ✅ Responsibilities

Each platform module implements:

* Git installation check
* Prompting and storing GitHub credentials (secure input)
* Configuring Git username and email
* Generating SSH keys (if not present)
* Cloning repositories
* Switching or creating branches

## 🧠 How It Works

1. **Entry Point**: The `llm_parser` generates a task.
2. **MCP Flow**:

   * `llm_parser` → `mcp_client` → `mcp_server` → `tools/git_configurator/linux.py`
3. **Pre-checks**:

   * Validates Git is installed
   * Prompts user for credentials (hidden input for passwords)
   * Sets up Git config locally
   * Generates SSH key if needed
4. **Action Execution**:

   * Based on requested action (`clone`, `generate_ssh_key`, `switch_branch`, etc.), the corresponding function is triggered.

## 📁 Directory Structure

```bash
cli-agent/
├── main.py
├── llm_parser/
├── mcp_client/
├── mcp_server/
└── tools/
    └── git_configurator/
        ├── linux.py
        ├── mac.py
        └── windows.py (future)
```

## 🧪 Testing

You can write test cases under a new folder `tests/git_configurator/` and structure them like:

```python
# Example test case stub
from tools.git_configurator.linux import is_git_installed

def test_git_installed():
    assert is_git_installed() == True
```

## 💡 Notes

* Ensure Git is installed manually if not handled by the script (esp. on fresh OS).
* Use Personal Access Tokens for GitHub when prompted for password.
* SSH key generation is skipped if the key file already exists.

## 🔧 Future Improvements

* Support Windows with Git Bash or native CLI
* Credential storage using GPG or GitHub CLI
* Full test coverage
