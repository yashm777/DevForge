Metadata-Version: 2.4
Name: cli-agent
Version: 0.1.0
Summary: A CLI agent with MCP server for development tool management
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: openai>=1.0.0
Requires-Dist: click>=8.0.0
Requires-Dist: requests>=2.25.0
Requires-Dist: rich>=13.0.0
Requires-Dist: typer>=0.9.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: python-dotenv>=1.0.0

# DevForge CLI Agent

An AI-powered development assistant with MCP (Model Context Protocol) integration that allows you to manage development tools and environments using natural language commands.

## Features

- **Natural Language Commands**: Use plain English to install, uninstall, update, and check versions of development tools
- **MCP Integration**: Built-in MCP server and client for enhanced tool management capabilities
- **Cross-Platform Support**: Works on Windows, macOS, and Linux
- **Code Generation**: Generate Python code from natural language descriptions
- **System Information**: Get detailed system and server information

## Prerequisites

Before installing DevForge CLI Agent, ensure you have the following:

### Fresh System Setup

#### Windows
1. **Install Python**: Download and run the installer from [python.org](https://python.org/downloads/)
   - ✅ Check "Add Python to PATH" during installation
   - ✅ Choose "Install for all users" (recommended)
2. **Install Git**: Download and run the installer from [git-scm.com](https://git-scm.com/download/win)
   - ✅ Choose "Git from the command line and also from 3rd-party software"
   - ✅ Keep other default settings
3. **Open Command Prompt** and verify: `python --version` and `git --version`

#### macOS
1. **Install Homebrew** (if not already installed):
   ```bash
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
   ```
2. **Install Python and Git**:
   ```bash
   brew install python git
   ```

#### Linux (Ubuntu/Debian)
```bash
sudo apt update
sudo apt install python3 python3-pip git
```

#### Linux (CentOS/RHEL/Fedora)
```bash
sudo dnf install python3 python3-pip git
```

### Install UV Package Manager
Once Python is installed, install the UV package manager:
```bash
pip install uv
```

## Installation

### Option 1: Quick Setup (Recommended)

**Use our automated setup scripts that check all prerequisites and install dependencies:**

#### Windows
1. **Clone the repository**:
   ```cmd
   git clone <repository-url>
   cd "DevForge CLI Agent"
   ```
2. **Run the setup script**: Double-click `setup.bat` or run:
   ```cmd
   setup.bat
   ```

#### macOS/Linux
1. **Clone the repository**:
   ```bash
   git clone <repository-url>
   cd "DevForge CLI Agent"
   ```
2. **Run the setup script**:
   ```bash
   bash setup.sh
   ```

The setup scripts will:
- ✅ Check if Python, Git, and UV are installed
- ✅ Install UV package manager if missing
- ✅ Install all project dependencies with `uv sync`
- ✅ Provide next steps and usage examples

### Option 2: Manual Installation

If you prefer to install manually:

1. **Clone the repository**:
```bash
git clone <repository-url>
cd "DevForge CLI Agent"
```

2. **Install dependencies**:
```bash
uv sync
```

3. **Set up your OpenAI API key**:
```bash
export OPENAI_API_KEY="your-api-key-here"
```

4. **Start the MCP server**:
```bash
uv run python -m mcp_server.mcp_server --host localhost --port 8000
```

## Quick Setup Script

For convenience, you can use our setup scripts:

**Windows**: Double-click `setup.bat`  
**macOS/Linux**: Run `bash setup.sh`

These scripts will check prerequisites and guide you through any missing dependencies.

## Usage

### Basic Commands

The CLI agent supports natural language commands for tool management:

```bash
# Install tools
uv run cli-agent run "install docker"
uv run cli-agent run "get nodejs"
uv run cli-agent run "setup python"

# Uninstall tools
uv run cli-agent run "remove docker"
uv run cli-agent run "uninstall nodejs"

# Update tools
uv run cli-agent run "update docker"
uv run cli-agent run "upgrade python"

# Check versions
uv run cli-agent run "version of docker"
uv run cli-agent run "what version is nodejs"

# Generate code
uv run cli-agent run "generate a python function to sort a list"

# Get system information
uv run cli-agent run "show system info"
```
cli-agent run "update docker"
cli-agent run "upgrade python"

# Check versions
cli-agent run "what version of docker"
cli-agent run "check version nodejs"
cli-agent run "python version"

# System information
cli-agent run "system info"
cli-agent run "what os am i using"

# Code generation
cli-agent run "generate code for a hello world function"
cli-agent run "write python code for a calculator"
cli-agent run --output my_code.py "create a web scraper"
```

<!-- ### Chained Commands (coming soon)

You can chain multiple commands together:

```bash
cli-agent run "install docker and tell me what version you used"
cli-agent run "setup nodejs then check its version"
``` -->

### MCP Server

Start the MCP server for enhanced functionality:

```bash
uv run python -m mcp_server.mcp_server --host localhost --port 8000
```

## Troubleshooting

### Common Issues

#### "ModuleNotFoundError: No module named 'fastapi'"
**Solution**: Run `uv sync` to install all dependencies.

#### "uv: command not found"
**Solution**: Install UV package manager:
```bash
pip install uv
```

#### "Permission denied" on macOS/Linux
**Solution**: The CLI agent will attempt to install missing package managers (like Homebrew) automatically. If you see permission prompts, they are for legitimate system operations.

#### "Multiple packages found" on Windows
**Solution**: The CLI agent will show you available options. Choose the one you want by running the command again with the specific package ID.

#### OpenAI API Issues
**Solutions**:
- Ensure your API key is set: `echo $OPENAI_API_KEY`
- Verify your API key is valid at [OpenAI Platform](https://platform.openai.com/)
- Check your API usage limits and billing

### Fresh System Checklist

If you're setting up on a completely fresh system:

1. ✅ Python 3.8+ installed and in PATH
2. ✅ UV package manager installed (`pip install uv`)
3. ✅ Repository cloned
4. ✅ Dependencies installed (`uv sync`)
5. ✅ OpenAI API key configured
6. ✅ MCP server running (for full functionality)

### Getting Help

- Check our setup scripts: `./setup.sh` (macOS/Linux) or `setup.bat` (Windows)
- View system information: `uv run cli-agent run "system info"`
- Report issues on our GitHub repository

## Architecture

### Core Components

- **CLI Interface** (`cli_agent/main.py`): Main command-line interface using Typer and Rich
- **LLM Parser** (`llm_parser/parser.py`): Natural language command parsing using OpenAI GPT-4o
- **MCP Client** (`mcp_client/client.py`): HTTP-based MCP client for tool communication
- **MCP Server** (`mcp_server/mcp_server.py`): MCP server providing tool management services
- **Tool Manager** (`tools/tool_manager.py`): Central tool management and code generation

### Tool Management System

The tool management system is organized by platform and action type:

```
tools/
├── installers/     # Tool installation logic
│   ├── windows.py
│   ├── mac.py
│   └── linux.py
├── uninstallers/   # Tool removal logic
│   ├── windows.py
│   ├── mac.py
│   └── linux.py
├── upgraders/      # Tool update logic
│   ├── windows.py
│   ├── mac.py
│   └── linux.py
├── version_checkers/ # Version checking logic
│   ├── windows.py
│   ├── mac.py
│   └── linux.py
├── tool_manager.py # Central tool management
├── os_utils.py     # OS detection utilities
└── constants.py    # System constants
```

### Code Generation

The code generation tool is integrated into the tool manager and uses OpenAI's GPT-4o model to generate Python code from natural language descriptions.

## Configuration

### Environment Variables

- `OPENAI_API_KEY`: Required for natural language parsing and code generation

### Dependencies

Key dependencies include:
- `typer`: CLI framework
- `rich`: Terminal formatting and UI
- `openai`: OpenAI API integration
- `requests`: HTTP client for MCP communication

## Development

### Project Structure

```
CLI Agent/
├── cli_agent/           # Main CLI package
│   ├── __init__.py
│   └── main.py         # CLI entry point
├── llm_parser/         # Natural language parsing
│   ├── __init__.py
│   └── parser.py       # Command parsing logic
├── mcp_client/         # MCP client implementation
│   ├── __init__.py
│   └── client.py       # HTTP-based MCP client
├── mcp_server/         # MCP server implementation
│   ├── __init__.py
│   ├── mcp_server.py   # Server implementation
│   └── system_utils.py # System utilities
├── tools/              # Tool management system
│   ├── installers/     # Platform-specific installers
│   ├── uninstallers/   # Platform-specific uninstallers
│   ├── upgraders/      # Platform-specific upgraders
│   ├── version_checkers/ # Platform-specific version checkers
│   ├── tool_manager.py # Central tool management
│   ├── os_utils.py     # OS detection
│   └── constants.py    # Constants
├── pyproject.toml      # Project configuration
├── requirements.txt    # Dependencies
└── README.md          # This file
```

### Adding New Tools

To add support for a new tool:

1. Implement platform-specific handlers in the appropriate directories
2. Add tool patterns to the LLM parser
3. Update the tool manager if needed

### Testing

Test the CLI agent with various commands:

```bash
# Test basic functionality
cli-agent run "system info"

# Test tool installation
cli-agent run "install docker"

# Test code generation
cli-agent run "generate code for a simple calculator"
```

## Troubleshooting

### Common Issues

1. **OpenAI API Key Not Set**: Ensure `OPENAI_API_KEY` environment variable is set
2. **MCP Server Connection Issues**: Check if the server is running on the correct port
3. **Tool Installation Failures**: Verify platform-specific handlers are implemented

### Debug Mode

Enable verbose output for debugging:

```bash
cli-agent run --verbose "your command here"
```
